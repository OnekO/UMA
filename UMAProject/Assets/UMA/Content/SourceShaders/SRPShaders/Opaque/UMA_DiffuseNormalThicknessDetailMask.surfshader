BEGIN_OPTIONS
   ShaderName "UMA/Diffuse_Normal_Thickness_DetailMask"
   Stackable "False"
   Workflow "Metallic"
END_OPTIONS

BEGIN_PROPERTIES

    [BetterHeader(Material Specific)]
	_Color ("Main Color", Color) = (1, 1, 1, 1)
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_Metallic ("Metallic", Range(0,2)) = 1
	_SmoothnessModulation ("Smoothness Level", Range(0,2)) = 1
	[BetterHeader(Lighting Adjustment)]
    _HalfLambertStrength ("Lambert(0), HalfLambert(1)", Range(0,8)) = 1
    _RimLightingModulation ("Rim Lighting Level", Float) = 0
	_RimLightColor("Rim Light Color", Color) = (1,1,1,1)
	_RimLightPower("Rim Light Power", Range(0.5, 12)) = 4
    _SSSColor("SSS Color", Color) = (1,0.4,0.4,1)
    _SSSLevel("SSS Level", Range(0,1)) = 0.3
    _SSSGlow("SSS Glow", Range(0,1)) = 0.3 
    [Enum(Normal, 0, Inverted, 1)]_InvertThickness("Invert Thickness", Float) = 0

    [Enum(Off,0,Front,1,Back,2)]_CullMode("Culling Mode", Float) = 2
    [Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double sided normal mode", Float) = 1

    [GroupRollout(Textures)]
    [Group(Textures)][NoScaleOffset]_BaseMap("BaseMap", 2D) = "white" {}
    [Group(Textures)][NoScaleOffset]_BumpMap("_BumpMap", 2D) = "bump" {}
    [Group(Textures)]_NormalStrength ("Normal Strength", Range(0,2)) = 1
    [Group(Textures)][NoScaleOffset]_ThicknessMap("_ThicknessMap", 2D) = "white" {}

    [Group(Textures)][NoScaleOffset]_DetailMask ("Detail Mask", 2D) = "black" {}
    [Group(Textures)]_DetailOne ("Detail One", 2D) = "black" {}
    [Group(Textures)]_DetailOneNormal ("Detail One Normal", 2D) = "bump" {}
    [Group(Textures)]_DetailTwo ("Detail Two", 2D) = "black" {}
    [Group(Textures)]_DetailTwoNormal ("Detail Two Normal", 2D) = "bump" {}
    [Group(Textures)]_DetailThree ("Detail Three", 2D) = "black" {}
    [Group(Textures)]_DetailThreeNormal ("Detail Three Normal", 2D) = "bump" {}
END_PROPERTIES

BEGIN_PASS("All")
   Cull [_CullMode]
END_PASS

// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
    half4 _Color;
	half  _ColorModulation;
	half  _SmoothnessModulation;
	half  _Metallic;
    half  _EmissiveModulation;
    half _HalfLambertStrength;
    float _DoubleSidedNormalMode;
    half3 _RimLightColor;
	half  _RimLightPower;
    float _RimLightingModulation;
    float _NormalStrength;
    half4 _SSSColor;
    float _InvertThickness;
    float _SSSLevel;
    float _SSSGlow;
    float4 _DetailOne_ST;
    float4 _DetailTwo_ST;
    float4 _DetailThree_ST;
    float4 _DetailOneNormal_ST;
    float4 _DetailTwoNormal_ST;
    float4 _DetailThreeNormal_ST;
END_CBUFFER


// All code goes here
BEGIN_CODE

   TEXTURE2D(_BaseMap);
   SAMPLER(sampler_BaseMap);
   TEXTURE2D(_BumpMap);
   SAMPLER(sampler_BumpMap);
   TEXTURE2D(_ThicknessMap);

   TEXTURE2D(_DetailMask);

   TEXTURE2D(_DetailOne);
   SAMPLER(sampler_DetailOne);
   TEXTURE2D(_DetailOneNormal);
   SAMPLER(sampler_DetailOneNormal);

   TEXTURE2D(_DetailTwo);
   SAMPLER(sampler_DetailTwo);
   TEXTURE2D(_DetailTwoNormal);
   SAMPLER(sampler_DetailTwoNormal);

   TEXTURE2D(_DetailThree);
   SAMPLER(sampler_DetailThree);
   TEXTURE2D(_DetailThreeNormal);
   SAMPLER(sampler_DetailThreeNormal);

    inline half UMADotClamped (half3 a, half3 b)
    {
        return max(0.0h, dot(a, b));
    }

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 auv = d.texcoord0.xy;
      float2 nuv = d.texcoord0.xy;
      float2 cuv = d.texcoord0.xy;

      float2 dt1uv = d.texcoord0.xy * _DetailOne_ST.xy + _DetailOne_ST.zw;
      float2 dt2uv = d.texcoord0.xy * _DetailTwo_ST.xy + _DetailTwo_ST.zw;
      float2 dt3uv = d.texcoord0.xy * _DetailThree_ST.xy + _DetailThree_ST.zw;

      float2 dt1nuv = d.texcoord0.xy * _DetailOneNormal_ST.xy + _DetailOneNormal_ST.zw;
      float2 dt2nuv = d.texcoord0.xy * _DetailTwoNormal_ST.xy + _DetailTwoNormal_ST.zw;
      float2 dt3nuv = d.texcoord0.xy * _DetailThreeNormal_ST.xy + _DetailThreeNormal_ST.zw;

	  half4 mask = SAMPLE_TEXTURE2D(_ThicknessMap,sampler_BaseMap,cuv);
	  half4 base_c = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, auv);
	  half4 basepackednormal = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap,nuv);
	  half3 base_n = UnpackScaleNormal(basepackednormal,_NormalStrength);

	  half base_smooth = mask.a;
	  half base_thick = mask.r;
      o.Alpha = base_c.a * _Color.a;
	  
      o.Albedo = base_c * _ColorModulation * _Color.rgb;
	  o.Metallic = _Metallic;
	  o.Smoothness = base_smooth * _SmoothnessModulation;

      if (_DoubleSidedNormalMode == 0)
      {
         base_n *= d.isFrontFace ? 1 : -1;
      }
      else if (_DoubleSidedNormalMode == 1)
      {
		 base_n.z *= d.isFrontFace ? 1 : -1;
      }

      // Detail Mask
      half4 detailMask = SAMPLE_TEXTURE2D(_DetailMask, sampler_BaseMap, auv);
      if (detailMask.r>0) 
      { 
            float4 add_n = SAMPLE_TEXTURE2D(_DetailOneNormal, sampler_DetailOneNormal, dt1nuv);
            float4 add_c = SAMPLE_TEXTURE2D(_DetailOne, sampler_DetailOne, dt1uv);

            o.Albedo = lerp(o.Albedo, add_c.rgb, (detailMask.r * add_c.a));
            base_n = normalize(lerp(base_n, add_n.rgb, (detailMask.r * add_n.a)));
      }
      if (detailMask.g>0)
      { 
          float4 add_n = SAMPLE_TEXTURE2D(_DetailTwoNormal, sampler_DetailTwoNormal, dt2nuv);
          float4 add_c = SAMPLE_TEXTURE2D(_DetailTwo, sampler_DetailTwo, dt2uv);

          o.Albedo = lerp(o.Albedo, add_c.rgb, (detailMask.g * add_c.a));
          base_n = normalize(lerp(base_n, add_n.rgb, (detailMask.g * add_n.a)));
      }
      if (detailMask.b>0) 
      { 
          float4 add_n = SAMPLE_TEXTURE2D(_DetailThreeNormal, sampler_DetailThreeNormal, dt3nuv);
          float4 add_c = SAMPLE_TEXTURE2D(_DetailThree, sampler_DetailThree, dt3uv);
    
          o.Albedo = lerp(o.Albedo, add_c.rgb, (detailMask.b * add_c.a));
          base_n = normalize(lerp(base_n, add_n.rgb, (detailMask.b * add_n.a)));
      }


	 float3 lightDir;
     float3 lightColor;
	 GetSun(lightDir, lightColor);
     o.Normal = base_n;
	 float3 normalDirection = TangentToWorldSpace(d, o.Normal);
	 float atten = 1.0;
	 float lambert = dot(normalDirection, lightDir);

     lambert = lerp(lambert, lambert * 0.5 + 0.5, _HalfLambertStrength);
     o.Albedo *= atten * lightColor * lambert;
     if (_InvertThickness) 
     { 
         base_thick = 1.0 - base_thick;
     }
     float fakeLum = dot(o.Albedo, float3(0.299, 0.587, 0.114));
     o.Albedo += (base_thick * _SSSColor * _SSSLevel * fakeLum);

     
     o.Emission = max(0.0h, dot(lightDir, o.Normal)) * _SSSColor * base_thick * _SSSGlow;

     if (_RimLightingModulation>0) 
     { 
	    float rim = 1.0 - saturate(dot(d.tangentSpaceViewDir, o.Normal)); 
        float3 rimcol =(pow(rim, _RimLightPower) * _RimLightColor) * _RimLightingModulation; 
	    //o.Emission = max(o.Emission, rimcol);
        o.Emission += rimcol;
      }
	}

END_CODE

