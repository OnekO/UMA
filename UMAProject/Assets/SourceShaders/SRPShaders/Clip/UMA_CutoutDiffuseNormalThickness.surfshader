BEGIN_OPTIONS
   ShaderName "UMA/Cutout_Diffuse_Normal_Thickness"
   Stackable "False"
   Workflow "Metallic"
END_OPTIONS

BEGIN_PROPERTIES

    [BetterHeader(Material Specific)]
	_Color ("Main Color", Color) = (1, 1, 1, 1)
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_Metallic ("Metallic", Range(0,2)) = 1
	_SmoothnessModulation ("Smoothness Level", Range(0,2)) = 1
	[BetterHeader(Lighting Adjustment)]
    [Toggle]_UseHalfLambert ("Use Half Lambert", Float) = 0
    _HalfLambertStrength ("Lambert(0), HalfLambert(1)", Range(0,4)) = 1
    _RimLightingModulation ("Rim Lighting Level", Float) = 0
	_RimLightColor("Rim Light Color", Color) = (1,1,1,1)
	_RimLightPower("Rim Light Power", Range(0.5, 12)) = 4
    _SSSColor("SSS Color", Color) = (1,0.4,0.4,1)
    _SSSLevel("SSS Level", Range(0,1)) = 0.3
    _AlphaClip("Alpha Clip", Range(0,1)) = 0
    [Enum(Normal, 0, Inverted, 1)]_InvertThickness("Invert Thickness", Float) = 0

    [Enum(Off,0,Front,1,Back,2)]_CullMode("Culling Mode", Float) = 2
    [Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double sided normal mode", Float) = 1

    [GroupRollout(Textures)]
    [Group(Textures)][NoScaleOffset]_BaseMap("BaseMap", 2D) = "white" {}
    [Group(Textures)][NoScaleOffset]_BumpMap("_BumpMap", 2D) = "bump" {}
    [Group(Textures)]_NormalStrength ("Normal Strength", Range(0,2)) = 1
    [Group(Textures)][NoScaleOffset]_ThicknessMap("_ThicknessMap", 2D) = "white" {}
END_PROPERTIES

BEGIN_PASS("All")
   Cull [_CullMode]
END_PASS

// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
    half4 _Color;
	half  _ColorModulation;
	half  _SmoothnessModulation;
	half  _Metallic;
    half  _EmissiveModulation;
    half _HalfLambertStrength;
    float _DoubleSidedNormalMode;
    half3 _RimLightColor;
	half  _RimLightPower;
    float _RimLightingModulation;
    float _NormalStrength;
    half4 _SSSColor;
    float _InvertThickness;
    float _SSSLevel;
    float _AlphaClip;
    float _UseHalfLambert;
END_CBUFFER


// All code goes here
BEGIN_CODE

   TEXTURE2D(_BaseMap);
   SAMPLER(sampler_BaseMap);
   TEXTURE2D(_BumpMap);
   SAMPLER(sampler_BumpMap);
   TEXTURE2D(_ThicknessMap);
   SAMPLER(sampler_ThicknessMap);


	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 auv = d.texcoord0.xy;
      float2 nuv = d.texcoord0.xy;
      float2 cuv = d.texcoord0.xy;

	  half4 mask = SAMPLE_TEXTURE2D(_ThicknessMap,sampler_ThicknessMap,cuv);
	  half4 base_c = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, auv);

      if ((base_c.a * _Color.a) < _AlphaClip) discard;

	  half4 basepackednormal = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap,nuv);
	  half3 base_n = UnpackScaleNormal(basepackednormal,_NormalStrength);

	  half base_smooth = mask.a;
	  half base_thick = mask.r;
      	  
      o.Albedo = base_c.rgb * _ColorModulation * _Color.rgb;
	  o.Normal = base_n;
	  o.Metallic = _Metallic;
	  o.Smoothness = base_smooth * _SmoothnessModulation;

      if (_DoubleSidedNormalMode == 0)
      {
         o.Normal *= d.isFrontFace ? 1 : -1;
      }
      else if (_DoubleSidedNormalMode == 1)
      {
		 o.Normal.z *= d.isFrontFace ? 1 : -1;
      }

	 float3 lightDir;
     float3 lightColor;
	 GetSun(lightDir, lightColor);

     if (_UseHalfLambert) 
     { 
	    float3 normalDirection = TangentToWorldSpace(d, o.Normal);
	    float atten = 1.0;
	    float lambert = dot(normalDirection, lightDir);

        lambert = lerp(lambert, lambert * 0.5 + 0.5, _HalfLambertStrength);
        o.Albedo *= atten * lightColor * lambert;        
     }


     if (_InvertThickness) 
     { 
        base_thick = 1.0 - base_thick;
     }
     o.Emission = max(0.0h,dot(lightDir, o.Normal)) * _SSSColor.rgb * base_thick * _SSSLevel;

     if (_RimLightingModulation>0) 
     { 
	    float rim = 1.0 - saturate(dot(d.tangentSpaceViewDir, o.Normal)); 
        float3 rimcol =(pow(rim, _RimLightPower) * _RimLightColor) * _RimLightingModulation; 
	    //o.Emission = max(o.Emission, rimcol);
        o.Emission += rimcol;
      }
	}

END_CODE

