BEGIN_OPTIONS
   ShaderName "UMA/Hair_Cutout"
   Stackable "False"
   Workflow "Metallic"
END_OPTIONS

BEGIN_PROPERTIES

    [BetterHeader(Material Specific)]
	_OverlayCount ("OverlayCount", Float) = 0
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_MetallicModulation ("Metallic Level", Range(0,2)) = 1
	_SmoothnessModulation ("Smoothness Level", Range(0,2)) = 1
    _HalfLambertStrength ("Lambert(0), HalfLambert(1)", Range(0,4)) = 1

    [Toggle(_ALPHACLIP)] _UseAlphaClip ("Use Alpha Clipping", Float) = 0
    [ShowIfDrawer(_UseAlphaClip)]_AlphaClip ("Clip Value", Range(0,1)) = 0.5

    [Enum(Off,0,Front,1,Back,2)]_CullMode("Culling Mode", Float) = 2
    [Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double sided normal mode", Float) = 1

    [GroupRollout(Base Overlay)]
    [Group(Base Overlay)][NoScaleOffset]_BaseMap("BaseMap", 2D) = "white" {}
    [Message(A _BumpMap is encoded as follows R Normal_X G Normal_Y B Metallic_Level A Smoothness_Level)] 
    [BetterHeader(Normal Mask)]
    [Group(Base Overlay)][NoScaleOffset]_BumpMap("_BumpMap", 2D) = "bump" {}
    [Group(Base Overlay)][NoScaleOffset]_MetallicGlossMap("_MetallicGlossMap", 2D) = "black" {}

    // no AlphaMask for the base.
    [Group(Base Overlay)]_Tile0_0 ("Tile0_0", Float) = 1
    [Group(Base Overlay)]_Tile0_1 ("Tile0_1", Float) = 1
    [Group(Base Overlay)]_Tile0_2 ("Tile0_2", Float) = 1
    [Group(Base Overlay)]_NormalStrength0("Normal Strength 0", Range(0,2)) = 1
	[Group(Base Overlay)]_RedColor0   ("RedColor", Color) = (1, 1, 1, 1)
	[Group(Base Overlay)]_GreenColor0 ("GreenColor", Color) = (1, 1, 1, 1)
	[Group(Base Overlay)]_BlueColor0  ("BlueColor", Color) = (1, 1, 1, 1)
    [Group(Base Overlay)]_Tint0_0 ("Tint 0_0",Color) = (1,1,1,1)
    [Group(Base Overlay)]_Tint0_1 ("Tint 0_1",Color) = (1,1,1,1)
    [Group(Base Overlay)]_Tint0_2 ("Tint 0_2",Color) = (1,1,1,1)
    [Group(Base Overlay)]_Add0_0 ("Add 0_0",Color) = (0,0,0,0)
    [Group(Base Overlay)]_Add0_1 ("Add 0_1",Color) = (0,0,0,0)
    [Group(Base Overlay)]_Add0_2 ("Add 0_2",Color) = (0,0,0,0)
 
END_PROPERTIES

BEGIN_PASS("All")
   Cull [_CullMode]
END_PASS

// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER

    half  _OverlayCount;
	half  _ColorModulation;
	half  _SmoothnessModulation;
	half  _MetallicModulation;
    half  _EmissiveModulation;
    half _HalfLambertStrength;
    float _DoubleSidedNormalMode;
    half _AlphaClip;
    half  _Tile0_0;
    half  _Tile0_1; 
    half  _Tile0_2;
	half4 _RedColor0;
	half4 _GreenColor0;
	half4 _BlueColor0;
    half _NormalStrength0;
    half4 _Tint0_0;
    half4 _Tint0_1;
    half4 _Tint0_2;
    half4 _Add0_0;
    half4 _Add0_1;
    half4 _Add0_2;
    half4 _HasTextures0;

END_CBUFFER


BEGIN_DEFINES
   #pragma shader_feature_local _ _ALPHACLIP
END_DEFINES

// if you are writing a subshader, any defines that should be set on the main
// shader are defined here
//BEGIN_DEFINES
//	#define _SIMPLELIT 1	// compile as SimpleLit shader in URP, or as BlinPhong in standard
//END_DEFINES

// All code goes here
BEGIN_CODE

   TEXTURE2D(_BaseMap);
   SAMPLER(sampler_BaseMap);
   TEXTURE2D(_BumpMap);
   SAMPLER(sampler_BumpMap);
   TEXTURE2D(_MetallicGlossMap);

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      // Base Overlay always exists.   Uses Textures 0,1,2 (2 is not currently used)
      float2 auv = d.texcoord0.xy * _Tile0_0;
      float2 nuv = d.texcoord0.xy * _Tile0_1;
      float2 cuv = d.texcoord0.xy * _Tile0_2;

	  half4 base_c = (SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, auv) * _Tint0_0)+_Add0_0;
      #if (_ALPHACLIP)
      if (base_c.a < _AlphaClip)
      {
         discard;
      }
      #endif
      half4 mask = SAMPLE_TEXTURE2D(_MetallicGlossMap,sampler_BaseMap,cuv);

	  half4 basepackednormal = (SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap,nuv) * _Tint0_1) + _Add0_1;
	  half3 base_n = UnpackScaleNormal(basepackednormal,_NormalStrength0);

	  half base_smooth = mask.a;
	  half base_Metallic = mask.r;

      o.Alpha = base_c.a; 
	  
      o.Albedo = base_c.rgb * _ColorModulation;
	  o.Normal = base_n;
	  o.Metallic = base_Metallic * _MetallicModulation;
	  o.Smoothness = base_smooth * _SmoothnessModulation;

      if (_DoubleSidedNormalMode == 0)
      {
         o.Normal *= d.isFrontFace ? 1 : -1;
      }
      else if (_DoubleSidedNormalMode == 1)
      {
		 o.Normal.z *= d.isFrontFace ? 1 : -1;
      }


	 float3 lightDir;
     float3 lightColor;
	 GetSun(lightDir, lightColor);
	 float3 normalDirection = TangentToWorldSpace(d, o.Normal);
	 float atten = 1.0;
	 float lambert = dot(normalDirection, lightDir);

     lambert = lerp(lambert, lambert * 0.5 + 0.5, _HalfLambertStrength);
     o.Albedo *= atten * lightColor * lambert;
	}

END_CODE

